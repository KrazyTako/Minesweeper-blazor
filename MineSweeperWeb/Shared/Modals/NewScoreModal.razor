@inject IJSRuntime jsRuntime
@inject ScoresService scoreService;
<!-- Modal -->
<div class="modal fade" id="@modalId" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Confirm your high score!</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <EditForm OnValidSubmit="CreateNewScore" Model="createScore">
                <div class="modal-body">
                    <div class="form-group">
                        <label for="name" class="col-form-label">Name</label>
                        <InputText @bind-Value="createScore.Name" class="form-control" id="name">
                        </InputText>
                    </div>
                    <div class="form-group">
                        <label for="message-text" class="col-form-label">Message</label>
                        <InputTextArea @bind-Value="createScore.Message" class="form-control" id="message-text"></InputTextArea>
                    </div>
                </div>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-outline-primary" disabled="@sendBtnDisabled">
                        <span class="@spinnerCssState spinner-border-sm" role="status" aria-hidden="true"></span>
                        Save
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private CreateScore createScore = new CreateScore();
    private string modalId = "createNewScoreModal";
    private long _time;
    private int _width;
    private int _height;
    private int _mineCount;

    [Parameter]
    public EventCallback<Score> OnScoreCreatedCallback { get; set; }

    string spinnerCssState = null;
    bool sendBtnDisabled = false;

    private async Task CreateNewScore()
    {
        spinnerCssState = "spinner-border";
        sendBtnDisabled = true;
        Score newScore = await scoreService.CreateAnonymousScore(createScore.Name, createScore.Message, _width, _height, _mineCount, _time);
        spinnerCssState = null;
        sendBtnDisabled = false;
        await jsRuntime.InvokeVoidAsync("hideModal", modalId);
        await OnScoreCreatedCallback.InvokeAsync(newScore);
    }

    public async Task Show(long time, int width, int height, int mineCount)
    {
        _time = time;
        _width = width;
        _height = height;
        _mineCount = mineCount;
        await jsRuntime.InvokeVoidAsync("showModal", modalId, true);
    }
}
