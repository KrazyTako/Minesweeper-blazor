@page "/"

<h1>Hello, world!</h1>

Welcome to your new app.


<div class="container">
    @for (int i = 0; i < tiles.Length; i++)
    {
        int row = i;
        <div class="row flex-nowrap">
            @for (int j = 0; j < tiles[i].Length; j++)
            {
                int col = j;
                TileProperty tile = tiles[i][j];
                <div class="col" @onmouseup="(e) => OnClick(e, tile)" style="background-color:@tile.BackgroundColor; border:solid 1px; min-height:30px; min-width:25px; text-align:center">
                    @tile.Message
                </div>
            }
        </div>
    }

    <EditForm Model="gridSize">
        <InputNumber @bind-Value="gridSize" min="5" max="20"></InputNumber>
        <InputNumber @bind-Value="totalMines" min="1" max="@(gridSize * gridSize - 1)"></InputNumber>
        <button @onclick="reset" class="btn-outline-primary">Reset</button>
    </EditForm>
</div>

@code {
    private int gridSize = 8;
    private int totalMines = 10;

    private TileProperty[][] tiles;
    private bool gameOver = false;
    private Random generator = new Random();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        reset();
    }

    private void reset()
    {
        gameOver = false;
        tiles = new TileProperty[gridSize][];
        for (int i = 0; i < tiles.Length; i++)
        {
            tiles[i] = new TileProperty[gridSize];
            for (int j = 0; j < tiles[i].Length; j++)
            {
                tiles[i][j] = new TileProperty();
                tiles[i][j].Row = i;
                tiles[i][j].Col = j;
            }
        }

        int count = 0;
        while (count < totalMines)
        {
            int randomRow = generator.Next(0, gridSize);
            int randomCol = generator.Next(0, gridSize);
            TileProperty tile = tiles[randomRow][randomCol];

            if (!tile.IsBomb)
            {
                tile.IsBomb = true;
                count++;
            }
        }

        for (int i = 0; i < tiles.Length; i++)
        {
            for (int j = 0; j < tiles[i].Length; j++)
            {
                var tile = tiles[i][j];
                tile.SurroundingCount = CountNeighboringBombs(tile);
            }
        }
    }

    private void OnClick(MouseEventArgs e, TileProperty tile)
    {
        if (gameOver || tile.IsRevealed)
        {
            return;
        }

        if (e.Button == 2)
        {
            tile.IsFlagged = !tile.IsFlagged;
        }
        else
        {
            if (tile.IsFlagged)
            {
                return;
            }
            tile.IsRevealed = true;
            if (tile.IsBomb)
            {
                gameOver = true;
                return;
            }
            if (tile.SurroundingCount == 0)
            {
                RevealAllSurrounding(tile);
            }
        }
    }

    private int CountNeighboringBombs(TileProperty tile)
    {
        int total = 0;

        for (int xoff = -1; xoff <= 1; xoff++)
        {
            for (int yoff = -1; yoff <= 1; yoff++)
            {
                var i = tile.Row + xoff;
                var j = tile.Col + yoff;
                if (i > -1 && i < gridSize && j > -1 && j < gridSize)
                {
                    var neighbor = tiles[i][j];
                    if (neighbor.IsBomb)
                    {
                        total++;
                    }
                }
            }
        }

        return total;
    }

    private void RevealAllSurrounding(TileProperty tile)
    {
        for (int xoff = -1; xoff <= 1; xoff++)
        {
            for (int yoff = -1; yoff <= 1; yoff++)
            {
                var i = tile.Row + xoff;
                var j = tile.Col + yoff;
                if (i > -1 && i < gridSize && j > -1 && j < gridSize)
                {
                    var neighbor = tiles[i][j];
                    if(neighbor.IsRevealed)
                    {
                        continue;
                    }
                    neighbor.IsRevealed = true;
                    if (neighbor.SurroundingCount == 0)
                    {
                        RevealAllSurrounding(neighbor);
                    }
                }
            }
        }
    }
}