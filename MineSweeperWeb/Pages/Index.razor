@page "/"
@using System.Diagnostics
@inject MineSweeperData.Services.ScoresService scoreService;

<div class="container">
    <h1>@message</h1>

    <p>Remaining mines: @remainingMines</p>
    <p>Elapsed time: @elapsedTime</p>

    <Minesweeper OnGameWinCallback="OnGameWin" OnGameLoseCallback="OnGameLose" OnFirstActionCallback="OnFirstAction" OnFlagSetCallback="OnFlagSet" @ref="minesweeper"></Minesweeper>
    <EditForm Model="rows" class="form-inline my-3">
        <div class="form-group mr-2">
            <label class="mr-2" for="rows">Rows</label>
            <InputNumber id="rows" class="form-control" @bind-Value="rows" min="5" max="30"></InputNumber>
        </div>
        <div class="form-group mr-2">
            <label class="mr-2" for="columns">Columns</label>
            <InputNumber id="columns" class="form-control" @bind-Value="columns" min="5" max="30"></InputNumber>
        </div>
        <div class="form-group mr-2">
            <label class="mr-2" for="mineCount">Mine Count</label>
            <InputNumber id="mineCount" class="form-control" @bind-Value="totalMines" min="1" max="@(rows * columns - 1)"></InputNumber>
        </div>
        <button type="button" @onclick="Reset" class="btn btn-outline-primary">Reset</button>
    </EditForm>
    <ScoreBoard @ref="scoreBoard"></ScoreBoard>
    <NewScoreModal @ref="newScoreModal" OnScoreCreatedCallback="OnScoreCreated"></NewScoreModal>
</div>

@code {
    private Minesweeper minesweeper;
    private ScoreBoard scoreBoard;
    private NewScoreModal newScoreModal;
    private Stopwatch stopwatch = new Stopwatch();
    private string message = "Good luck!";
    private string elapsedTime = "0";
    private int rows = 8;
    private int columns = 8;
    private int totalMines = 10;
    private int remainingMines = 10;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnInitialized();
        if (firstRender)
        {
            Reset();
            InitializeStopwatch();
        }
    }

    private async Task InitializeStopwatch()
    {
        while (true)
        {
            await Task.Delay(1000);
            if (stopwatch.IsRunning)
            {
                elapsedTime = Math.Round(stopwatch.ElapsedMilliseconds / 1000.0).ToString();
                StateHasChanged();
            }
        }
    }

    private void OnFirstAction()
    {
        stopwatch.Restart();
    }

    private void Reset()
    {
        stopwatch.Stop();
        elapsedTime = "0";
        message = "Good luck!";
        remainingMines = totalMines;
        minesweeper.Reset(rows, columns, totalMines);
        StateHasChanged();
    }

    private async Task OnGameWin()
    {
        stopwatch.Stop();
        message = "You've won!";
        await newScoreModal.Show(stopwatch.ElapsedMilliseconds, rows, columns, totalMines);
    }

    private void OnGameLose()
    {
        stopwatch.Stop();
        message = "You've lost :(";
    }

    private void OnFlagSet(bool active)
    {
        if (active)
        {
            remainingMines--;
        }
        else
        {
            remainingMines++;
        }
    }

    private void OnScoreCreated(Score newScore) => scoreBoard.AddScore(newScore);
}