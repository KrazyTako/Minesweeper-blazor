@inject MineSweeperData.Services.ScoresService scoreService

<h3>Your Latest Scores</h3>

<div class="tab-content mt-2">
    <div class="tab-pane active table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Time</th>
                    <th scope="col">Points</th>
                    <th scope="col">Width</th>
                    <th scope="col">Height</th>
                    <th scope="col">Mines</th>
                    <th scope="col">Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var score in scores)
                {
                    <tr>
                        <td>@score.Time.Minutes:@score.Time.Seconds</td>
                        <td>@ComputeScore(score).ToString()</td>
                        <td>@score.Width</td>
                        <td>@score.Height</td>
                        <td>@score.MineCount</td>
                        <td>@score.Date.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [CascadingParameter]
    private string userId { get; set; }

    IList<Score> scores = new List<Score>();

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(userId))
        {
            scores = (await scoreService.GetScoresByUserId(userId)).ToList();
        }
    }

    private int ComputeScore(Score score)
    {
        int tileCount = score.Width * score.Height;
        return (int)((score.MineCount / (double)tileCount) * 100.0 * 1.3 * Math.Sqrt(tileCount) - score.Time.TotalSeconds);
    }

    public void AddNewScore(Score score)
    {
        scores.Add(score);
        StateHasChanged();
    }
}
