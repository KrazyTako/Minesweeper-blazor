@page "/"
@using System.Diagnostics
@using Microsoft.AspNetCore.Identity
@inject IScoresService scoreService
@inject UserManager<ApplicationUser> UserManager

<div class="container">
    <h1>
        <AuthorizeView>
            <Authorized>
                Hello, @context.User.Identity.Name!
            </Authorized>
        </AuthorizeView>
    </h1>
    <h2>
        @message
    </h2>

    <p>Remaining mines: @remainingMines</p>
    <p>Elapsed time: @elapsedTime</p>

    <BoardGame OnGameWinCallback="OnGameWin" OnGameLoseCallback="OnGameLose" OnFirstActionCallback="OnFirstAction" OnFlagSetCallback="OnFlagSet" @ref="minesweeper"></BoardGame>
    <EditForm Model="customDifficulty" class="my-3">
        <div class="form-row">
            <div class="form-group col">
                <label for="rows">Rows</label>
                <InputNumber disabled="@disabled" id="rows" class="form-control" @bind-Value="customDifficulty.Rows" min="5" max="30"></InputNumber>
            </div>
            <div class="form-group col">
                <label for="columns">Columns</label>
                <InputNumber disabled="@disabled" id="columns" class="form-control" @bind-Value="customDifficulty.Columns" min="5" max="30"></InputNumber>
            </div>
            <div class="form-group col">
                <label for="mineCount">Mines</label>
                <InputNumber disabled="@disabled" id="mineCount" class="form-control" @bind-Value="customDifficulty.Mines" min="1" max="@(customDifficulty.Rows * customDifficulty.Columns - 1)"></InputNumber>
            </div>
            <button type="button" @onclick="Reset" class="btn btn-outline-primary align-items-">Reset</button>
        </div>
        <div class="form-row">
            @foreach (Difficulty difficulty in Difficulty.GetAll())
            {
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="difficultyRadioOptions" id="@difficulty.Name" checked="@(selectedDifficulty == difficulty)" @onchange="@(() => selectedDifficulty = difficulty)" value="@difficulty">
                    <label class="form-check-label" for="@difficulty.Name">@difficulty.Name</label>
                </div>
            }
        </div>
    </EditForm>
    <ChatArea></ChatArea>
    <AuthorizeView>
        <Authorized>
            <CascadingValue Value="userId">
                    <AppUsersScores @ref="appUserScores"></AppUsersScores>
                </CascadingValue>
            </Authorized>
    </AuthorizeView>
    <ScoreBoard @ref="scoreBoard"></ScoreBoard>
    <InfoModal @ref="infoModal"></InfoModal>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string userId;

    private BoardGame minesweeper;
    private ScoreBoard scoreBoard;
    private AppUsersScores appUserScores;
    private InfoModal infoModal;
    private Stopwatch stopwatch = new Stopwatch();
    private string message = "Good luck!";
    private string elapsedTime = "0";
    private int rows = 9;
    private int columns = 9;
    private int totalMines = 10;
    private int remainingMines = 10;
    private CustomDifficulty customDifficulty = new CustomDifficulty();
    private Difficulty selectedDifficulty = Difficulty.BEGINNER;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        InitializeStopwatch();
        customDifficulty.Rows = 9;
        customDifficulty.Columns = 9;
        customDifficulty.Mines = 10;
        var authState = await authenticationStateTask;
        if (authState.User.Identity.IsAuthenticated)
        {
            var user = await UserManager.FindByNameAsync(authState.User.Identity.Name);
            userId = user.Id;
        }
    }

    private async Task InitializeStopwatch()
    {
        while (true)
        {
            await Task.Delay(1000);
            if (stopwatch.IsRunning)
            {
                elapsedTime = Math.Round(stopwatch.ElapsedMilliseconds / 1000.0).ToString();
                StateHasChanged();
            }
        }
    }

    private void OnFirstAction()
    {
        stopwatch.Restart();
    }

    private void Reset()
    {
        stopwatch.Stop();
        elapsedTime = "0";
        message = "Good luck!";
        SetDifficulty();
        minesweeper.Reset(rows, columns, totalMines);
        StateHasChanged();
    }

    private void SetDifficulty()
    {
        if (selectedDifficulty == Difficulty.CUSTOM)
        {
            rows = customDifficulty.Rows;
            columns = customDifficulty.Columns;
            totalMines = customDifficulty.Mines;
        }
        else
        {
            rows = selectedDifficulty.Rows;
            columns = selectedDifficulty.Columns;
            totalMines = selectedDifficulty.Mines;
            // Just to show in the UI inputs what their difficulty has been set to.
            customDifficulty.Rows = rows;
            customDifficulty.Columns = columns;
            customDifficulty.Mines = totalMines;
        }
        remainingMines = totalMines;
    }

    private async Task OnGameWin()
    {
        stopwatch.Stop();
        message = "You've won!";
        var authState = await authenticationStateTask;
        if (authState.User.Identity.IsAuthenticated)
        {
            var newScore = await scoreService.CreateUserScore(userId, rows, columns, totalMines, stopwatch.ElapsedMilliseconds);
            appUserScores.AddNewScore(newScore);
        }
        else
        {
            await infoModal.Show();
        }
    }

    private void OnGameLose()
    {
        stopwatch.Stop();
        message = "You've lost :(";
    }

    private void OnFlagSet(bool active)
    {
        if (active)
        {
            remainingMines--;
        }
        else
        {
            remainingMines++;
        }
    }

    private void OnScoreCreated(Score newScore) => scoreBoard.AddScore(newScore);
    private bool disabled { get => selectedDifficulty != Difficulty.CUSTOM; }
}