@using System.Diagnostics
@using System.Timers
@inject VibrationService vibrationService

<div oncontextmenu="return false" class="@sweeperClassMines disable-text-highlight overflow-auto minesweeper">
    @for (int i = 0; i < game.gameBoard.Length; i++)
    {
        int row = i;
        <div class="row no-gutters flex-nowrap">
            @for (int j = 0; j < game.gameBoard[i].Length; j++)
            {
                int col = j;
                TileProperty tile = game.gameBoard[i][j];
                <div class="col tile" @ontouchstart="TouchStart" @ontouchmove="() => lastEventWasTouchMove = true" @ontouchend="(e) => TouchEnd(e, tile)" @onmouseup="(e) => OnClick(e, tile)">
                    <div class="tile-content @tile.CssClass ">
                        <span class="@tile.CssIcon">
                            @(tile.IsRevealed && string.IsNullOrEmpty(tile.CssIcon) ? (tile.SurroundingCount == 0 ? "" : tile.SurroundingCount.ToString()) : "")
                        </span>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public EventCallback OnGameWinCallback { get; set; }

    [Parameter]
    public EventCallback OnGameLoseCallback { get; set; }

    [Parameter]
    public EventCallback<int> OnFlagSetCallback { get; set; }

    [Parameter]
    public EventCallback OnFirstActionCallback { get; set; }

    private bool firstTouch = true;
    private bool lastEventWasTouch;
    private bool lastEventWasTouchMove;

    private MinesweeperGame game;
    private Stopwatch longPressWatch = new Stopwatch();
    private Timer timer = new Timer(200);
    private string sweeperClassMines = "minesweeper-12";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        timer.Elapsed += doVibration;
        Reset(9, 9, 10);
    }

    public void Reset(int rows, int columns, int mines)
    {
        switch (columns)
        {
            case var n when n <= 12:
                sweeperClassMines = "minesweeper-12";
                break;
            case var k when k <= 16:
                sweeperClassMines = "minesweeper-16";
                break;
            case var i when i <= 20:
                sweeperClassMines = "minesweeper-20";
                break;
            default:
                sweeperClassMines = "minesweeper-30";
                break;
        }
        firstTouch = true;
        game = new MinesweeperGame(rows, columns, mines);
        game.GameWon += (_, __) => OnGameWinCallback.InvokeAsync(null);
        game.GameLost += (_, __) => OnGameLoseCallback.InvokeAsync(null);
    }

    private void doVibration(Object source, System.Timers.ElapsedEventArgs e)
    {
        timer.Stop();
        if (lastEventWasTouchMove)
        {
            return;
        }
        vibrationService.VibrateAsync(100);
    }

    private void TouchStart(TouchEventArgs e)
    {
        longPressWatch.Restart();
        lastEventWasTouch = true;
        timer.Start();
    }

    private Task TouchEnd(TouchEventArgs e, TileProperty tile)
    {
        timer.Stop();
        longPressWatch.Stop();
        return DoAction(tile, longPressWatch.ElapsedMilliseconds > 200);
    }

    private Task OnClick(MouseEventArgs e, TileProperty tile) => DoAction(tile, e.Button == 2);

    private async Task DoAction(TileProperty tile, bool setFlag)
    {
        if (game.GameOver || lastEventWasTouch)
        {
            lastEventWasTouch = false;
            return;
        }

        if (firstTouch)
        {
            firstTouch = false;
            await OnFirstActionCallback.InvokeAsync(true);
        }

        if (setFlag)
        {
            game.Flag(tile);
            await OnFlagSetCallback.InvokeAsync(game.FlagCount);
        }
        else
        {
            if (tile.IsRevealed)
            {
                game.Chord(tile);
            }
            else
            {
                game.Reveal(tile);
            }
        }
    }
}
