@using Minesweeper.Data.Entities;
@inject IScoresService scoresService;

<h3>Leader Boards</h3>

<ul class="nav nav-tabs" id="myTab">
    <li class="nav-item">
        <a class="nav-link active" data-toggle="tab" @onclick="() => UpdateDate(DateTime.Now.AddDays(-7), DateTime.Now)" href="#last7">Last 7 Days</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" data-toggle="tab" @onclick="() => UpdateDate(DateTime.Now.AddDays(-30), DateTime.Now)" href="#last30">Last 30 Days</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" data-toggle="tab" @onclick="() => UpdateDate(DateTime.Now.AddDays(-60), DateTime.Now)" href="#last60">Last 60 Days</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" data-toggle="tab" @onclick="() => UpdateDate(DateTime.Now.AddDays(-90), DateTime.Now)" href="#last90">Last 90 Days</a>
    </li>
</ul>

<div class="tab-content mt-2">
    <div class="tab-pane active table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Rank</th>
                    <th scope="col">Player</th>
                    <th scope="col">Time</th>
                    <th scope="col">Points</th>
                    <th scope="col">Difficulty</th>
                    <th scope="col">Date</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < shownScores.Count; i++)
                {
                    int rank = i + 1 + (pageCount * currentPage);
                    <tr>
                        <th scope="row">@rank</th>
                        <td>@(shownScores[i].ApplicationUser?.UserName ?? shownScores[i].Name)</td>
                        <td>@shownScores[i].Time.Minutes:@shownScores[i].Time.Seconds</td>
                        <td>@ComputeScore(shownScores[i]).ToString()</td>
                        <td>@GetDifficulty(shownScores[i])</td>
                        <td>@shownScores[i].Date.ToShortDateString()</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <PaginationNav TotalCount="scores.Count" PageCount="pageCount" OnPageChangeCallback="OnPageChanged"></PaginationNav>
</div>

@code {
    IList<Score> scores = new List<Score>();
    IList<Score> shownScores = new List<Score>();
    int pageCount = 10;
    int currentPage = 0;

    protected override async Task OnInitializedAsync()
    {
        await UpdateDate(DateTime.Now.AddDays(-7), DateTime.Now);
        await base.OnInitializedAsync();
    }

    private async Task UpdateDate(DateTime start, DateTime end)
    {
        scores = (await scoresService.GetScoresInDateRange(start, end))
                    .OrderByDescending(ComputeScore)
                    .ToList();
        shownScores = scores.Skip(0 * pageCount).Take(pageCount).ToList();
    }

    public void AddScore(Score score)
    {
        scores.Add(score);
        StateHasChanged();
    }

    public void OnPageChanged(int pageNum)
    {
        shownScores = scores.Skip(pageNum * pageCount).Take(pageCount).ToList();
        currentPage = pageNum;
    }

    private int ComputeScore(Score score)
    {
        int tileCount = score.Width * score.Height;
        return (int)((score.MineCount / (double)tileCount) * 100.0 * 1.4 * Math.Sqrt(tileCount) - score.Time.TotalSeconds);
    }

    private string GetDifficulty(Score score)
    {
        if (score.Width == 9 && score.Height == 9 && score.MineCount == 10)
        {
            return "Beginner";
        }
        if (score.Width == 16 && score.Height == 16 && score.MineCount == 40)
        {
            return "Intermediate";
        }
        if (score.Width == 16 && score.Height == 30 && score.MineCount == 99)
        {
            return "Expert";
        }
        if (score.Width == 30 && score.Height == 30 && score.MineCount == 250)
        {
            return "Impossible";
        }
        return $"{score.Width}x{score.Height} {score.MineCount}m";
    }
}
